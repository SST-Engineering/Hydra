COMMON "OnError.txt";

function mssql_drop_and_create($use_db_connect, $use_db_table, $db_create_table, $db_create_finals) begin
   $fn_title = "In function mssql_drop_and_create, ";
   if $use_db_connect is null return return_with_error("{$fn_title} Running sql function (drop and create) without a valid DB connect");
   if $use_db_table is null return return_with_error("{$fn_title} Running a sql function (drop and create) without specifying destination table");
   if $db_create_table is null return return_with_error("{$fn_title} Running a sql function (drop and create) without specifying table details");

   if mssql_test_exists($use_db_connect, $use_db_table) begin
      $ok = mssql_connect($use_db_connect);
      if $ok is not true return return_with_error("{$fn_title} Failed to open the target DB for drop and create ");
      $query = "DROP TABLE {$use_db_table}";
      $ok = mssql_query($query);
      if $ok is false return return_with_error("{$fn_title} Failed in DROP TABLE query for table {$use_db_table} ");
      mssql_close();
      end
   if $db_create_finals is null $db_create_finals = " ON [PRIMARY] ";
   return mssql_create_table($use_db_connect, $use_db_table, $db_create_table, $db_create_finals);

   end

function mssql_test_exists($use_db_connect, $use_db_table) begin
   $fn_title = "In mssql_test_exists, ";
   if $use_db_connect is null return return_with_error("{$fn_title} Running sql function (test exists) without a valid DB connect");
   if $use_db_table is null return return_with_error("{$fn_title} Running a sql function (test exists) without specifying destination table");
   $ok = mssql_connect($use_db_connect);
   if $ok is not true return return_with_error("{$fn_title} Failed to open the target DB for test exists ");

   // form the test query
   $matches = preg_match("/\[(?P<catalog>[^\]]+?)\]\.\[(?P<schema>[^\]]+?)\]\.\[(?P<tablename>[^\]]+)\]/",$use_db_table);
   if $matches is false return return_with_error("{$fn_title} Badly formed table name in {$use_db_table} needs [catalog].[schema].[tablename] ");
   $catalog = $matches.catalog;
   $tablename = $matches.tablename;
   $query  = "SELECT * FROM [{$catalog}].information_schema.tables WHERE TABLE_NAME=N'{$tablename}'";
   $ok = mssql_query($query);
   if $ok is false  return return_with_error("{$fn_title} Failed in test table exists "+sql_last_error());
   $row = mssql_fetch_row();
   if $row is false $ok=false else $ok = true;
   // Close connection, finished with that now
   mssql_close();
   return $ok;
   end

function mssql_create_table($use_db_connect, $use_db_table, $db_create_table, $db_create_finals) begin
   $fn_title = "In function mssql_create_table, ";
   if $use_db_connect is null return return_with_error("{$fn_title} Running sql function (table create) without a valid DB connect");
   if $use_db_table is null return return_with_error("{$fn_title} Running a sql function (table create) without specifying destination table");
   if $db_create_table is null return return_with_error("{$fn_title} Running a sql function (table create) without specifying table details");
   if $db_create_finals is null $db_create_finals = " ON [PRIMARY] ";

   $ok = mssql_connect($use_db_connect);
   if $ok is not true return return_with_error("{$fn_title} Failed to open the target DB for create table ");
   $query = "CREATE TABLE {$use_db_table} (";
   for all properties $field in $db_create_table begin
      $query = $query + "[{$field}] {$db_create_table.$field},";
      end
   $query = trim($query,",");
   $query = $query + ") {$db_create_finals} ";
   $ok = mssql_query($query);
   if $ok is false return return_with_error("{$fn_title} Failed in CREATE statement for create table {$use_db_table} ");
   return true;
   end

function mssql_get_columns($use_db_connect, $use_db_table) begin
   $fn_title = "In function mssql_get_columns, ";
   if $use_db_connect is null return return_with_error("{$fn_title} Running sql function (get columns) without a valid DB connect");
   if $use_db_table is null return return_with_error("{$fn_title} Running a sql function (get columns) without specifying destination table");
   $matches = preg_match("/\[(?P<catalog>[^\]]+?)\]\.\[(?P<schema>[^\]]+?)\]\.\[(?P<tablename>[^\]]+)\]/",$use_db_table);
   if $matches is false return return_with_error("{$fn_title} Badly formed table name in {$use_db_table} needs [catalog].[schema].[tablename] ");
   $catalog = $matches.catalog;
   $tablename = $matches.tablename;
   $query  = "SELECT COLUMN_NAME FROM [{$catalog}].information_schema.columns WHERE TABLE_NAME=N'{$tablename}'";
   $p.src_conn = $use_db_connect;
   $p.src_query = $query;
   $ok = query_table($p);
   if $ok is false return return_with_error("{$fn_title} In getting column names, query fails for table {$tablename}");
   for all properties $c in $ok begin
      if $ok.$c."COLUMN_NAME" is not null $columns.$c = $ok.$c."COLUMN_NAME";
      end
   return $columns;
   end

function mssql_clean_copy_DWH_WHERE($use_db_connect, $use_db_table, $use_dwh_table, $key, $where) begin
	issue_monitor("Clean and Copy to DWH");
	if $where is not null $where = " WHERE {$where}";
	$copy_retries = 0; $copied = false; while ($copy_retries < 3) AND ($copied is false) begin
		$clean_retries = 0; $cleaned = false; while ($clean_retries < 3) AND ($cleaned is false) begin
		   console("Will clean {$use_dwh_table}");
		   $use_clean_query.src_conn = $use_db_connect;
		   $use_clean_query.no_data_query = true;
		   $use_clean_query.src_query = "DELETE FROM {$use_dwh_table} WHERE UniqueKey='{$key}'";
		   $cleaned = query_table($use_clean_query);
		   $clean_retries += 1;
		   end
		if $cleaned is false return return_with_error("Fails to clean dwh {$use_dwh_table} with error " + sql_last_error());
		// Do the copy
		$copy_retries +=1;
		$use_copy_query.src_conn = $use_db_connect;
		$use_copy_query.no_data_query = true;
		$use_copy_query.src_query = "INSERT INTO {$use_dwh_table} SELECT * FROM {$use_db_table} {$where}";
		$copied = query_table($use_copy_query);
		end
	if $copied is false return return_with_error("Fails to copy to dwh {$use_dwh_table} from {$use_db_table} with error " + sql_last_error());
	console("Cleaned and copied after {$clean_retries} clean tries and {$copy_retries} copy tries");
	//mssql_set_copy_request_DWH($use_db_connect, $use_dwh_table);
	return true;
	end
function mssql_clean_copy_DWH($use_db_connect, $use_db_table, $use_dwh_table, $key) begin
	return mssql_clean_copy_DWH_WHERE($use_db_connect, $use_db_table, $use_dwh_table, $key, null);
	end
function set_reporting_view($use_db_connect, $view_name) begin
	//return mssql_set_copy_request_DWH($use_db_connect, $view_name);
	return true;
	end
function mssql_set_copy_request_DWH($use_db_connect, $use_dwh_table) begin
	$matches = preg_match("/\[(?P<catalog>[^\]]+?)\]\.\[(?P<schema>[^\]]+?)\]\.\[(?P<tablename>[^\]]+)\]/",$use_dwh_table);
	if $matches is false $tablename = $use_dwh_table else $tablename = $matches.tablename;
	$needed_query = "UPDATE [MIRROR_MI_CSS].[dbo].[Mirror_DWH] SET RequestCopy=GetDate() WHERE TableName='{$tablename}'";
	$needed.src_conn = #use_local_dwh;
	$needed.src_query = $needed_query;
	$needed.no_data_query = true;
	$to_copy = query_table($needed);
	if $to_copy is false begin
		console("CopyToReport: Unable to check if {$tablename} should be copied to report DWH "+last_error());
		return false;
		end
	return true;
	end
#use_local_dwh = "SQL_Local_DWH";
#use_report_dwh = "SQL_Reports_DWH";
function mssql_view_DWH_to_reports($use_db_connect, $view_name) begin
	$use_cat = "MI_TRY";
	$vdef.src_conn = $use_db_connect;
	$vdef.src_query = "SELECT ViewDef FROM [MIRROR_MI_CSS].[dbo].[MIrror_DWH] WHERE TableName='{$view_name}'";
	$vdef.no_data_query = false;
	$view_def = query_table($vdef);
	if $view_def is false return return_with_error("Fails to find view def for {$view_name}");
	$view_def = string_replace("'","''",URLDECODE($view_def.0.ViewDef));
	$into_view = "[{$use_cat}].[dbo].[{$view_name}]";
	$drop_dwh.src_query = "DROP VIEW {$into_view}";
	$drop_dwh.src_conn = #use_report_dwh;
	$drop_dwh.no_data_query = true;
	$dropped = query_table($drop_dwh);
	$vdef.src_conn = #use_report_dwh;
	$vdef.src_query = "USE {$use_cat};DECLARE @sql NVARCHAR(MAX); SELECT @sql='{$view_def}'; EXEC {$use_cat}..sp_executesql @sql";
	$vdef.no_data_query = true;
	$viewed = query_table($vdef);
	if $viewed is false return return_with_error("Fails to create view {$view_name}");
	$say_copied.src_conn = #use_local_dwh;
	$say_copied.src_query = "UPDATE [MIRROR_MI_CSS].[dbo].[Mirror_DWH] SET CopiedDate=GetDate(), RequestCopy = NULL WHERE TableName='{$view_name}'";
	$say_copied.no_data_query = true;
	$copied = query_table($say_copied);
	if $copied is false console("CopyToReport: Unable to set processed date for {$view_name} "+last_error());
	return true;
	end
function mssql_copy_DWH_to_reports($use_db_connect, $use_dwh_table) begin
	$matches = preg_match("/\[(?P<catalog>[^\]]+?)\]\.\[(?P<schema>[^\]]+?)\]\.\[(?P<tablename>[^\]]+)\]/",$use_dwh_table);
	if $matches is false $tablename = $use_dwh_table else $tablename = $matches.tablename;
	$needed_query = "SELECT ObjectType from [MIRROR_MI_CSS].[dbo].[Mirror_DWH] WHERE TableName='{$tablename}'";
	$needed.src_conn = #use_local_dwh;
	$needed.src_query = $needed_query;
	$needed.no_data_query = false;
	$to_copy = query_table($needed);
	if $to_copy is false begin
		console("CopyToReport: Unable to check if {$tablename} should be copied to report DWH "+last_error());
		return false;
		end
	$to_copy = $to_copy.0.ObjectType;
	if $to_copy is 'V' begin
		console("CopyToReport: The entity {$tablename} is a View, copy not required to report DWH");
		return mssql_view_DWH_to_reports($use_db_connect, $tablename);
		end
	if $to_copy is null begin
		console("CopyToReport: The table {$tablename} is not required for copy to report DWH");
		return false;
		end
	console("CopyToReport: Will copy {$tablename} to report DWH");
	mssql_exe_copy_to_Reports_DWH($use_db_connect, $tablename);
	$say_copied.src_conn = #use_local_dwh;
	$say_copied.src_query = "UPDATE [MIRROR_MI_CSS].[dbo].[Mirror_DWH] SET CopiedDate=GetDate(), RequestCopy = NULL WHERE TableName='{$tablename}'";
	$say_copied.no_data_query = true;
	$copied = query_table($say_copied);
	if $copied is false console("CopyToReport: Unable to set copied date for {$tablename} "+last_error());
	return true;
	end
function mssql_exe_copy_to_Reports_DWH($use_db_connect, $tablename) begin
	// Exe on the report DWH and pull
	$use_cat = "MI_TRY";
	$into_table = "[{$use_cat}].[dbo].[{$tablename}]";
	$drop_dwh.src_query = "DROP TABLE {$into_table}";
	$drop_dwh.src_conn = #use_report_dwh;
	$drop_dwh.no_data_query = true;
	$dropped = query_table($drop_dwh);
	// Get url of src
	$c = lookup_dictionary($use_db_connect);
	if $c is false return return_with_error("CopyToReport: Fails to get src url to copy");
	
	$copy_dwh.src_query = "SELECT * INTO [{$use_cat}].[dbo].[{$tablename}] FROM [{$c.Host}].[MI_CSS].[dbo].[{$tablename}]";
	$copy_dwh.src_conn = #use_report_dwh;
	$copy_dwh.no_data_query = true;
	console("Will execute {$copy_dwh.src_query}");
	$copied = query_table($copy_dwh);
//	$copied = mssql_table_copy(#use_local_dwh, #use_report_dwh, $c.Host, "[MI_CSS].[dbo].[{$tablename}]", "[{$use_cat}].[dbo].[{$tablename}]");	
	if $copied is false console("CopyToReport: Fails to execute the copy {$tablename} "+last_error());
	return true;
	end
function mssql_table_copy($use_local_dwh, $use_report_dwh, $local_host, $from_local, $to_report) begin
    $names = mssql_get_columns($use_local_dwh, $from_local);
	$select_cols = "";
	for all properties $row in $names begin
		$select_cols += "[{$names.$row.name}],"; 
		end
	$select_cols = trim($select_cols,',');
	$add_ident.src_conn = $use_local_dwh;
	$add_ident.src_query = "ALTER TABLE {$from_local} DROP COLUMN id_temp ";
	$add_ident.no_data_query = true;
	$added_ident = query_table($add_ident);
	$add_ident.src_conn = $use_local_dwh;
	$add_ident.src_query = "ALTER TABLE {$from_local} ADD id_temp INT NOT NULL IDENTITY(1,1)";
	$add_ident.no_data_query = true;
	$added_ident = query_table($add_ident);
	if $added_ident is false return return_with_error("Fails to ADD id_temp column")
	$count_rows.src_conn = $use_local_dwh;
	$count_rows.src_query = "SELECT max(id_temp) as [top_id] FROM {$from_local}";
	$count_rows.no_data_query = false;
	$counted_rows = query_table($count_rows);
	if $counted_rows is false return return_with_error("Fails to count rows to add");
	$counted_rows = $counted_rows.0.top_id;
	issue_monitor("Copy in {$from_local} rows {$counted_rows}");
	console("Copies {$counted_rows} into {$to_report}");
	$row_counter = 1;
	$batch_size = 1000;
	while $row_counter <= $counted_rows begin
		$copy_in.src_conn = $use_remote_dwh;
		$copy_in.src_query = literal {
			 INSERT INTO $to_report WITH (TABLOCK)
			 SELECT $select_cols
			 FROM [$local_host].$from_local WITH (NOLOCK)
			 WHERE 1 = 1
			 AND id_temp between $row_counter and ($row_counter + $batch_size)
			};
		$copy_in.no_data_query = true;
		$ok = query_table($copy_in);
		if $ok is false return return_with_error("Copy in temp fails");
		$row_counter = $row_counter + $batch_size +1;
		issue_monitor("Copy row {$row_counter} of {$counted_rows}");
		end
	$add_ident.src_conn = $use_local_dwh;
	$add_ident.src_query = "ALTER TABLE {$from_local} DROP COLUMN id_temp ";
	$add_ident.no_data_query = true;
	$added_ident = query_table($add_ident);
	return true;
	end
/* Ends MS-SQL helper functions */

